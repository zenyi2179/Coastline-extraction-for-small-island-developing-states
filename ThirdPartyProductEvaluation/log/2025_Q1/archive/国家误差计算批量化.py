# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-01-08 09:04:02
"""
import os
import arcpy
import numpy as np
import pandas as pd
from dbfread import DBF


def save_to_excel(data, file_name):
    """
    将二维列表保存为Excel文件

    参数:
        data (list of lists): 二维列表，其中每一行是一个列表
        file_name (str): 输出的Excel文件名，应包含扩展名（如.xlsx）
    """
    # 将二维列表转换为DataFrame
    df = pd.DataFrame(data)
    # 保存为Excel文件
    df.to_excel(file_name, index=False, header=False)
    print(f"数据已成功保存到 {file_name}")

def calculate_statistics(dbf_file_path):
    """
    计算DBF文件中 'NEAR_DIST' 列的统计数据：
    - 平均值
    - 值小于30的个数百分比
    - 值小于60的个数百分比
    - 标准差
    - 均方根误差 (RMSE)

    参数:
    dbf_file_path (str): DBF文件路径

    返回:
    dict: 包含上述统计数据的字典
    """

    # 读取DBF文件
    dbf = DBF(dbf_file_path, encoding='utf-8')

    # 提取'NEAR_DIST'列的数据
    # near_dist_values = [record['NEAR_DIST'] for record in dbf if 'NEAR_DIST' in record]
    near_dist_values = []
    for record in dbf:
        if 'NEAR_DIST' in record:
            value = record['NEAR_DIST']
            if value >= 0:
                near_dist_values.append(value)

    # 如果没有数据，返回None
    if not near_dist_values:
        return None

    # 将数据转化为numpy数组
    near_dist_values = np.array(near_dist_values)

    # 计算统计值

    count_30 = np.sum(near_dist_values < 30)
    count_60 = np.sum(near_dist_values < 60)
    count_90 = np.sum(near_dist_values < 90)
    count_all = np.sum(near_dist_values <= 150)

    percent_30 = count_30 / count_all * 100
    percent_60 = count_60 / count_all * 100
    percent_90 = count_90 / count_all * 100

    mean_value = np.mean(near_dist_values)
    std_dev = np.std(near_dist_values)
    rmse = np.sqrt(np.mean(near_dist_values ** 2))

    # 返回结果
    return {
        'count_30': count_30,
        'count_60': count_60,
        'count_90': count_90,
        'count_all': count_all,

        'percent_30': percent_30,
        'percent_60': percent_60,
        'percent_90': percent_90,

        'mean_value': mean_value,
        'std_dev': std_dev,
        'rmse': rmse
    }

def cal_save(def_path):
    statistics = def_path
    if statistics:
        data_sid = [year, sid,
                    statistics['mean_value'],
                    statistics['std_dev'],
                    statistics['rmse'],
                    statistics['percent_30'],
                    statistics['percent_60'],
                    statistics['percent_90'],
                    statistics['count_30'],
                    statistics['count_60'],
                    statistics['count_90'],
                    statistics['count_all'], ]
        return data_sid
    else:
        data_sid = [year, sid, ]
        return data_sid


if __name__ == '__main__':
    # Global Environment settings
    year_list = [2010, 2015, 2020]
    sids_cou_list = ["ATG",
                     "BHS",
                     "BLZ",
                     "BRB",
                     "COM",
                     "CPV",
                     "CUB",
                     "DMA",
                     "DOM",
                     "FJI",
                     "FSM",
                     "GNB",
                     "GRD",
                     "GUY",
                     "HTI",
                     "JAM",
                     "KIR",
                     "KNA",
                     "LCA",
                     "MDV",
                     "MHL",
                     "MUS",
                     "NRU",
                     "PLW",
                     "PNG",
                     "SGP",
                     "SLB",
                     "STP",
                     "SUR",
                     "SYC",
                     "TLS",
                     "TON",
                     "TTO",
                     "TUV",
                     "VCT",
                     "VUT",
                     "WSM",
                     ]
    print(
        "year gid mean_value	std_dev	rmse	percent_30	percent_60	percent_90	count_30	count_60	count_90	count_all")

    for year in year_list:
        # 导出文件夹
        folder_excel_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\f_Python\_ThirdProductEvaluation\_log\20250614\统计文件夹"
        data_list = []
        for sid in sids_cou_list:
            # 示例使用 sids
            folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}"
            near_table = os.path.join(folder_path, fr'SP_{sid}_{str(year)[-2:]}.dbf')
            statistics = calculate_statistics(dbf_file_path=near_table)
            data_list.append(cal_save(def_path=statistics))
        save_to_excel(data=data_list, file_name=os.path.join(folder_excel_path, fr"SIDS_{year}.xlsx"))

        # 第三方数据集初始化
        # GCL_FCS30
        data_list = []
        for sid in sids_cou_list:
            # 示例使用 sids
            folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}\ThirdPartyDataSource"
            near_table = os.path.join(folder_path, fr'GCL_SP_{sid}_{str(year)[-2:]}.dbf')
            statistics = calculate_statistics(dbf_file_path=near_table)
            data_list.append(cal_save(def_path=statistics))
        save_to_excel(data=data_list, file_name=os.path.join(folder_excel_path, fr"GCL_{year}.xlsx"))
        # OSM
        if year in [2020]:
            data_list = []
            for sid in sids_cou_list:
                folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}\ThirdPartyDataSource"
                near_table = os.path.join(folder_path, fr'OSM_SP_{sid}_{str(year)[-2:]}.dbf')
                statistics = calculate_statistics(dbf_file_path=near_table)
                data_list.append(cal_save(def_path=statistics))
            save_to_excel(data=data_list, file_name=os.path.join(folder_excel_path, fr"OSM_{year}.xlsx"))
        # GSV
        if year in [2015]:
            data_list = []
            for sid in sids_cou_list:
                folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}\ThirdPartyDataSource"
                near_table = os.path.join(folder_path, fr'GSV_SP_{sid}_{str(year)[-2:]}.dbf')
                statistics = calculate_statistics(dbf_file_path=near_table)
                data_list.append(cal_save(def_path=statistics))
            save_to_excel(data=data_list, file_name=os.path.join(folder_excel_path, fr"GSV_{year}.xlsx"))
        # GMSSD
        if year in [2015]:
            data_list = []
            for sid in sids_cou_list:
                folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}\ThirdPartyDataSource"
                near_table = os.path.join(folder_path, fr'GMSSD_SP_{sid}_{str(year)[-2:]}.dbf')
                statistics = calculate_statistics(dbf_file_path=near_table)
                data_list.append(cal_save(def_path=statistics))
            save_to_excel(data=data_list, file_name=os.path.join(folder_excel_path, fr"GMSSD_{year}.xlsx"))