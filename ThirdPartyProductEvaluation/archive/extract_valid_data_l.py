# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-04-18 16:27:58
"""
import arcpy
import os


def extract_data_by_position(in_data, in_boun, out_data):
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: 按位置选择图层 (按位置选择图层) (management)
    aim_layer = arcpy.management.SelectLayerByLocation(
        in_layer=[in_data], overlap_type="INTERSECT", select_features=in_boun,
        search_distance="200 Meters", selection_type="NEW_SELECTION")

    # Process: 导出要素 (导出要素) (conversion)
    arcpy.conversion.ExportFeatures(in_features=aim_layer, out_features=out_data)

    # 清除选择
    arcpy.SelectLayerByAttribute_management(aim_layer, "CLEAR_SELECTION")


def extract_data_by_mask(in_data, in_boun, in_mask_boun, out_data):
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: 按位置选择图层 (按位置选择图层) (management)
    aim_layer = arcpy.management.SelectLayerByLocation(
        in_layer=[in_data], overlap_type="INTERSECT", select_features=in_boun,
        search_distance="200 Meters", selection_type="NEW_SELECTION")

    # Process: 成对裁剪 (成对裁剪) (analysis)
    arcpy.analysis.PairwiseClip(
        in_features=aim_layer, clip_features=in_mask_boun, out_feature_class=out_data)


def CSV(insert_boun_list, extract_boun_list, origin_data_list, out_folder, option='both'):
    admin_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\d_SIDS_Boundary\SIDS\AdminDivision'
    mask_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\boundary\boun_mask'
    print(fr'The command being executed is: {option}.')

    if option == 'insert' or option == 'both':
        for insert_boun in insert_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')
            for input_data in origin_data_list:
                out_path = os.path.join(out_folder, insert_boun)
                os.makedirs(name=out_path, exist_ok=True)
                output_name = fr'{insert_boun}_{os.path.splitext(os.path.basename(input_data))[0]}.shp'

                # 针对 相交类 岛屿导出
                extract_data_by_position(
                    in_data=input_data, in_boun=input_boun, out_data=os.path.join(out_path, output_name)
                )
                print(fr'insert success: {output_name}')

    if option == 'extract' or option == 'both':
        for insert_boun in extract_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')
            for input_data in origin_data_list:
                out_path = os.path.join(out_folder, insert_boun)
                os.makedirs(name=out_path, exist_ok=True)
                output_name = fr'{insert_boun}_{os.path.splitext(os.path.basename(input_data))[0]}.shp'

                # 针对 大陆裁剪类
                input_mask_boun = os.path.join(mask_path, fr'{insert_boun}_v3.shp')
                extract_data_by_mask(
                    in_data=input_data, in_boun=input_boun, in_mask_boun=input_mask_boun,
                    out_data=os.path.join(out_path, output_name)
                )
                print(fr'extract success: {output_name}')

def GMSSD_2015(insert_boun_list, extract_boun_list, out_folder, option='insert'):
    admin_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\d_SIDS_Boundary\SIDS\AdminDivision'
    mask_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\boundary\boun_mask'
    print(fr'The command being executed is: {option}.')

    # 有效 shp 名称列表
    origin_data = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\GMSSD_2015\_draft'
    data_files = os.listdir(origin_data)
    origin_data_list = [os.path.join(origin_data, data) for data in data_files if data.endswith('.shp')]

    if option == 'insert' or option == 'both':
        for insert_boun in insert_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')    # 国家边界
            for input_data in origin_data_list:
                out_path = os.path.join(out_folder, insert_boun)
                os.makedirs(name=out_path, exist_ok=True)   # 构建输出路径
                input_data_name = os.path.basename(input_data)
                output_name = fr"{insert_boun}_{input_data_name.split('_')[0]}_{input_data_name.split('_')[1]}.shp"

                # 针对 相交类 岛屿导出
                extract_data_by_position(
                    in_data=input_data, in_boun=input_boun, out_data=os.path.join(out_path, output_name)
                )
                print(fr'insert success: {output_name}')

    if option == 'extract' or option == 'both':
        for insert_boun in extract_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')
            for input_data in origin_data_list:
                out_path = os.path.join(out_folder, insert_boun)
                os.makedirs(name=out_path, exist_ok=True)
                input_data_name = os.path.basename(input_data)
                output_name = fr"{insert_boun}_{input_data_name.split('_')[0]}_{input_data_name.split('_')[1]}.shp"

                # 针对 大陆裁剪类
                input_mask_boun = os.path.join(mask_path, fr'{insert_boun}_v3.shp')
                extract_data_by_mask(
                    in_data=input_data, in_boun=input_boun, in_mask_boun=input_mask_boun,
                    out_data=os.path.join(out_path, output_name)
                )
                print(fr'extract success: {output_name}')

def GCL_FCS30(insert_boun_list, extract_boun_list, out_folder, extend_year, option='insert'):
    admin_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\d_SIDS_Boundary\SIDS\AdminDivision'
    mask_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\boundary\boun_mask'
    print(fr'The command being executed is: {option}.')

    # 有效 shp 名称列表
    origin_data = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\GCL_FCS30_{str(extend_year)[-2:]}\_draft'
    input_data = [os.path.join(origin_data, fr'GCL{extend_year}.shp')]

    if option == 'insert' or option == 'both':
        for insert_boun in insert_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')    # 国家边界
            out_path = os.path.join(out_folder, insert_boun)
            os.makedirs(name=out_path, exist_ok=True)  # 构建输出路径
            output_name = fr"{insert_boun}_GCL_{extend_year}.shp"
            # 针对 相交类 岛屿导出
            extract_data_by_position(
                in_data=input_data, in_boun=input_boun, out_data=os.path.join(out_path, output_name)
            )
            print(fr'insert success: {output_name}')

    if option == 'extract' or option == 'both':
        for insert_boun in extract_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')
            out_path = os.path.join(out_folder, insert_boun)
            os.makedirs(name=out_path, exist_ok=True)
            output_name = fr"{insert_boun}_GCL_{extend_year}.shp"

            # 针对 大陆裁剪类
            input_mask_boun = os.path.join(mask_path, fr'{insert_boun}_v3.shp')
            extract_data_by_mask(
                in_data=input_data, in_boun=input_boun, in_mask_boun=input_mask_boun,
                out_data=os.path.join(out_path, output_name)
            )
            print(fr'extract success: {output_name}')

def OSM(insert_boun_list, extract_boun_list, out_folder, option='both'):
    admin_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\d_SIDS_Boundary\SIDS\AdminDivision'
    mask_path = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\boundary\boun_mask'
    print(fr'The command being executed is: {option}.')

    # 有效 shp 名称列表
    origin_data = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\OSM\_draft'
    input_data = [os.path.join(origin_data, fr'coastlines_2020.shp')]

    if option == 'insert' or option == 'both':
        for insert_boun in insert_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')  # 国家边界
            out_path = os.path.join(out_folder, insert_boun)
            os.makedirs(name=out_path, exist_ok=True)  # 构建输出路径
            output_name = fr"{insert_boun}_CL_2020.shp"
            # 针对 相交类 岛屿导出
            extract_data_by_position(
                in_data=input_data, in_boun=input_boun, out_data=os.path.join(out_path, output_name)
            )
            print(fr'insert success: {output_name}')

    if option == 'extract' or option == 'both':
        for insert_boun in extract_boun_list:
            input_boun = os.path.join(admin_path, fr'{insert_boun}.shp')
            out_path = os.path.join(out_folder, insert_boun)
            os.makedirs(name=out_path, exist_ok=True)
            output_name = fr"{insert_boun}_CL_2020.shp"

            # 针对 大陆裁剪类
            input_mask_boun = os.path.join(mask_path, fr'{insert_boun}_v3.shp')
            extract_data_by_mask(
                in_data=input_data, in_boun=input_boun, in_mask_boun=input_mask_boun,
                out_data=os.path.join(out_path, output_name)
            )
            print(fr'extract success: {output_name}')


def main():
    # 不同类型的国家
    insert_boun_list = ["BMU",
                        "KNA",
                        "MSR",
                        "NRU",
                        "BRB",
                        "DMA",
                        "GUM",
                        "NIU",
                        "SGP",
                        "VCT",
                        "AIA",
                        "CYM",
                        "VGB",
                        "VIR",
                        "ABW",
                        "ASM",
                        "CUW",
                        "GRD",
                        "LCA",
                        "MTQ",
                        "ATG",
                        "GLP",
                        "STP",
                        "TCA",
                        "COM",
                        "WSM",
                        "TTO",
                        "MUS",
                        "TUV",
                        "PLW",
                        "MNP",
                        "JAM",
                        "PRI",
                        "CPV",
                        "TON",
                        "COK",
                        "SYC",
                        "VUT",
                        "MDV",
                        "NCL",
                        "KIR",
                        "MHL",
                        "FSM",
                        "FJI",
                        "SLB",
                        "BHS",
                        "CUB",
                        "PYF",
                        ]  # the insert 48 couns
    # insert_boun_list = ['BLZ']
    extract_boun_list = ["SXM",
                         "BLZ",
                         "DOM",
                         "GNB",
                         "GUY",
                         "HTI",
                         "PNG",
                         "SUR",
                         "TLS",
                         ]  # the extract 9 couns
    extract_boun_list = ["SXM"]

    out_folder = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\GSV'
    data_name_list = ['Continent_l', 'Big_l', 'Small_l', 'VerySmall_l']
    origin_data_list = [os.path.join(out_folder, fr'_draft\{name}.shp') for name in data_name_list]
    # option_list = ['insert', 'extract', 'both']

    # CSV(insert_boun_list, extract_boun_list, origin_data_list, out_folder, option='extract')
    # ----------------------------------------------------------------------------------------------------------------
    # out_folder = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\GMSSD_2015'
    # GMSSD_2015(insert_boun_list, extract_boun_list, out_folder, option='extract')
    # ----------------------------------------------------------------------------------------------------------------
    # for year in [2010, 2015, 2020]:
    #     out_folder = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\GCL_FCS30_{str(year)[-2:]}'
    #     GCL_FCS30(insert_boun_list, extract_boun_list, out_folder, extend_year=year, option='extract')
    # ----------------------------------------------------------------------------------------------------------------
    out_folder = fr'E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_ThirdProductEvaluation\OSM'
    OSM(insert_boun_list, extract_boun_list, out_folder, option='extract')


if __name__ == '__main__':
    main()
