# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-09-19 16:01:39
"""
import arcpy
import os
from sys import argv


def geojson_to_polygon(extract_geojson, tolerance, coast_line_shp):  # smooth
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: JSON 转要素 (JSON 转要素) (conversion)
    ISID_JSONToFeature = "in_memory\\ISID_JSONToFeature"
    arcpy.conversion.JSONToFeatures(in_json_file=extract_geojson, out_features=ISID_JSONToFeature,
                                    geometry_type="POLYLINE")
    # Process: 平滑线 (平滑线) (cartography)
    ISID_SmoothLine = "in_memory\\ISID_SmoothLine"
    with arcpy.EnvManager(transferGDBAttributeProperties="false"):
        arcpy.cartography.SmoothLine(in_features=ISID_JSONToFeature, out_feature_class=ISID_SmoothLine,
                                     algorithm="PAEK", tolerance=fr"{tolerance} Meters",
                                     endpoint_option="FIXED_CLOSED_ENDPOINT")
    # Process: 要素转面 (要素转面) (management)
    ISID_Polygon = "in_memory\\ISID_Poly"
    arcpy.management.FeatureToPolygon(in_features=[ISID_SmoothLine], out_feature_class=ISID_Polygon, attributes="ATTRIBUTES")
    # Process: 缓冲区 修复空洞
    ISID_Polygon_Fixed = "in_memory\\ISID_Polygon_Fixed"
    arcpy.analysis.Buffer(in_features=ISID_Polygon, out_feature_class="in_memory\\ISID_Polygon_Fixed_temp",
                          buffer_distance_or_field="50 Meters", line_side="FULL", line_end_type="ROUND",
                          dissolve_option="NONE", dissolve_field=[], method="PLANAR")
    # Process: 融合 (融合) (management)
    ISID_Dissolve = fr"in_memory\ISID_Dissolve"
    arcpy.management.Dissolve(in_features="in_memory\\ISID_Polygon_Fixed_temp", out_feature_class=ISID_Dissolve, multi_part="SINGLE_PART", unsplit_lines="UNSPLIT_LINES")
    arcpy.analysis.Buffer(in_features=ISID_Dissolve, out_feature_class=ISID_Polygon_Fixed,
                          buffer_distance_or_field="-50 Meters", line_side="FULL", line_end_type="ROUND",
                          dissolve_option="NONE", dissolve_field=[], method="PLANAR")

    # Process: 计算几何属性 (计算几何属性) (management)
    ISID_Polygon_Fixed_temp2 = arcpy.management.CalculateGeometryAttributes(in_features=ISID_Polygon_Fixed,
                                                                            geometry_property=[
                                                                                ["Shape_Area", "AREA_GEODESIC"]],
                                                                            area_unit="SQUARE_KILOMETERS",
                                                                            coordinate_format="SAME_AS_INPUT")[0]

    # Process: 导出要素 (导出要素) (conversion)
    # arcpy.conversion.ExportFeatures(in_features=ISID_Dissolve, out_features=coast_line_shp, where_clause="BUFF_DIST_1 <> 0")
    arcpy.conversion.ExportFeatures(in_features=ISID_Polygon_Fixed_temp2, out_features=coast_line_shp)


    # 标记 id 从 shp 名称里取得
    unique_id = extract_geojson.split('_')[0]
    # Process: 计算字段 (计算字段) (management)
    ISID_224209_subpixel_2_ = arcpy.management.CalculateField(in_table=coast_line_shp, field="UID_ISID", expression=unique_id, expression_type="PYTHON3", code_block="", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]
    # Process: 计算几何属性 (计算几何属性) (management)
    ISID_224209_subpixel_4_ = arcpy.management.CalculateGeometryAttributes(in_features=ISID_224209_subpixel_2_, geometry_property=[["Geo_Area", "AREA_GEODESIC"], ["Geo_Length", "PERIMETER_LENGTH_GEODESIC"]], length_unit="KILOMETERS", area_unit="SQUARE_KILOMETERS", coordinate_system="", coordinate_format="SAME_AS_INPUT")[0]




    # Process: 计算几何属性 (计算几何属性) (management)
    # c20367_ND2_zoo_ExportFeature_2_ = arcpy.management.CalculateGeometryAttributes(in_features=c20367_ND2_zoo_ExportFeature, geometry_property=[["Shape_Area", "AREA_GEODESIC"]], length_unit="", area_unit="SQUARE_KILOMETERS", coordinate_system="", coordinate_format="SAME_AS_INPUT")[0]
    # 导出有效图形中面积最大的
    # export_largest_area_feature(input_feature=ISID_Polygon_Fixed_temp2, output_feature=coast_line_shp,
    #                             area_field='Shape_Area')

    print(fr"Geojson to polygon: {coast_line_shp}")


if __name__ == '__main__':
    # Global Environment settings
    geojson_to_polygon(
        extract_geojson=fr"E:\_OrderingProject\36584_ND2_zoom_extract.geojson",
        tolerance=60,
        coast_line_shp=fr"E:\_OrderingProject\36584_ND2_zoom_extract.shp")