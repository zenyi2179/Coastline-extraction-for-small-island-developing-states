# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-01-08 09:04:02
"""
import os
import arcpy
import numpy as np
from dbfread import DBF


def export_error_table(standard_shp, sample_shp, near_dbf):  # 模型6

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: 复制要素 (复制要素) (management)
    copy_feature = fr"in_memory\standard_points_CopyFeatures"
    arcpy.management.CopyFeatures(in_features=standard_shp, out_feature_class=copy_feature)

    # Process: 邻近分析 (邻近分析) (analysis)
    copy_feature_near = arcpy.analysis.Near(in_features=copy_feature, near_features=[sample_shp], method="GEODESIC",
                                            field_names=[["NEAR_FID", "NEAR_FID"], ["NEAR_DIST", "NEAR_DIST"]])[0]

    # Process: 导出表 (导出表) (conversion)
    arcpy.conversion.ExportTable(in_table=copy_feature_near, out_table=near_dbf)

    # print(f"Dbf saved to {near_dbf}")


def calculate_statistics(dbf_file_path):
    """
    计算DBF文件中 'NEAR_DIST' 列的统计数据：
    - 平均值
    - 值小于30的个数百分比
    - 值小于60的个数百分比
    - 标准差
    - 均方根误差 (RMSE)

    参数:
    dbf_file_path (str): DBF文件路径

    返回:
    dict: 包含上述统计数据的字典
    """

    # 读取DBF文件
    dbf = DBF(dbf_file_path)

    # 提取'NEAR_DIST'列的数据
    near_dist_values = [record['NEAR_DIST'] for record in dbf if 'NEAR_DIST' in record]

    # 如果没有数据，返回None
    if not near_dist_values:
        return None

    # 将数据转化为numpy数组
    near_dist_values = np.array(near_dist_values)

    # 计算统计值
    mean_value = np.mean(near_dist_values)
    count_below_30 = np.sum(near_dist_values < 30) / len(near_dist_values) * 100
    count_below_60 = np.sum(near_dist_values < 60) / len(near_dist_values) * 100
    count_below_90 = np.sum(near_dist_values < 90) / len(near_dist_values) * 100
    std_dev = np.std(near_dist_values)
    rmse = np.sqrt(np.mean(near_dist_values ** 2))

    # 返回结果
    return {
        'mean_value': mean_value,
        'count_below_30_percent': count_below_30,
        'count_below_60_percent': count_below_60,
        'count_below_90_percent': count_below_90,
        'std_dev': std_dev,
        'rmse': rmse
    }


if __name__ == '__main__':
    # Global Environment settings
    year_list = [2000, 2010, 2020]
    sids_cou_list = [
                     'DMA',
                     'GUM',
                     'NIU',
                     'SGP',
                     'VCT',
    ]
    print("count_below_30	count_below_60  count_below_90	mean_value	std_dev	rmse")
    for year in year_list:
        for sid in sids_cou_list:

            # 示例使用
            folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}"
            # 初始化要素
            standard_points = os.path.join(folder_path, fr'StP_{sid}_{str(year)[-2:]}.shp')
            sample_points = os.path.join(folder_path, fr'SP_{sid}_{str(year)[-2:]}.shp')
            near_table = os.path.join(folder_path, 'near_table.dbf')
            # 计算误差表
            export_error_table(
                standard_shp=standard_points,
                sample_shp=sample_points,
                near_dbf=near_table
            )
            # 读取近邻列表 result = [['1', 0, 51.8882397814], ['2', 1, 49.6280583363]]

            # 计算DBF文件中 'NEAR_DIST' 列的统计数据
            dbf_file_path = near_table  # 请替换为你实际的DBF文件路径
            statistics = calculate_statistics(dbf_file_path)
            if statistics:
                # print("统计结果:", statistics)
                print(year, sid,
                      statistics['count_below_30_percent'],
                      statistics['count_below_60_percent'],
                      statistics['count_below_90_percent'],
                      statistics['mean_value'],
                      statistics['std_dev'], statistics['rmse'])
            else:
                print("未找到'NEAR_DIST'列数据或文件为空。")
