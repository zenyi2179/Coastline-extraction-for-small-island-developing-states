# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-09-19 16:01:39
"""
import arcpy
import os
from sys import argv

def geojson_to_polygon(extract_geojson, shp_mask, identifier, tolerance, coast_line_shp):  # smooth

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: JSON 转要素 (JSON 转要素) (conversion)
    ISID_JSONToFeature = "in_memory\\ISID_JSONToFeature"
    arcpy.conversion.JSONToFeatures(in_json_file=extract_geojson, out_features=ISID_JSONToFeature, geometry_type="POLYLINE")

    # Process: 平滑线 (平滑线) (cartography)
    ISID_SmoothLine = "in_memory\\ISID_224209_zo_JS_SmoothLine"
    with arcpy.EnvManager(transferGDBAttributeProperties="false"):
        arcpy.cartography.SmoothLine(in_features=ISID_JSONToFeature, out_feature_class=ISID_SmoothLine, algorithm="PAEK", tolerance=fr"{tolerance} Meters", endpoint_option="FIXED_CLOSED_ENDPOINT", error_option="NO_CHECK", in_barriers=[])

    # Process: 要素转面 (要素转面) (management)
    ISID_Polygon = "in_memory\\ISID_224209_Poly"
    arcpy.management.FeatureToPolygon(in_features=[ISID_SmoothLine], out_feature_class=ISID_Polygon, attributes="ATTRIBUTES")

    # 确认掩膜范围 shp_mask
    # 加载Shapefile/GDB Layer
    shapefile_layer = fr"in_memory\shapefile_layer"
    feature_path = shp_mask
    arcpy.MakeFeatureLayer_management(feature_path, shapefile_layer)

    # 标记id identifier
    where_clause = f"ALL_Uniq = {identifier}"
    arcpy.SelectLayerByAttribute_management(shapefile_layer, "NEW_SELECTION", where_clause)

    # Process: 要素转点 (要素转点) (management)
    center_poi = "in_memory\\_224209_cen"
    arcpy.management.FeatureToPoint(in_features=shapefile_layer, out_feature_class=center_poi, point_location="INSIDE")

    # 清除选择状态
    arcpy.SelectLayerByAttribute_management(shapefile_layer, "CLEAR_SELECTION")

    # Process: 按位置选择图层 (按位置选择图层) (management)
    aim_layer = arcpy.management.SelectLayerByLocation(in_layer=[ISID_Polygon], overlap_type="INTERSECT", select_features=center_poi, search_distance="", selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")

    # Process: 导出要素 (导出要素) (conversion)
    arcpy.conversion.ExportFeatures(in_features=aim_layer, out_features=coast_line_shp, where_clause="", use_field_alias_as_name="NOT_USE_ALIAS", sort_field=[])

    print(fr"Geojson to polygon: {coast_line_shp}")

if __name__ == '__main__':
    # Global Environment settings
    geojson_to_polygon(
        extract_geojson="E:\\_OrderingProject\\F_IslandsBoundaryChange\\a_ArcData\\GEE\\ISID_224209_zoom_ND_extract.geojson",
        shp_mask="E:\\_OrderingProject\\F_IslandsBoundaryChange\\a_ArcData\\temp\\224209.shp",
        identifier='273',
        tolerance=300,
        coast_line_shp="E:\\_OrderingProject\\F_IslandsBoundaryChange\\b_ArcMap\\IslandsBoundaryChange\\IslandsBoundaryChange.gdb\\ISID_224209_Po_fi222")
    pass
