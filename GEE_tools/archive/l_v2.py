# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-09-19 16:01:39
"""
import arcpy
import os
from sys import argv


def export_largest_area_feature(input_feature, output_feature, area_field):
    # 初始化最大面积变量和最大面积的要素ID
    max_area = None
    max_feature = None

    # 设置路径到要素类（shapefile 或者 geodatabase 中的要素类）
    feature_class = input_feature  # 或者 .gdb 里面的要素类

    # # 使用 ListFields 函数获取字段列表
    # fields = arcpy.ListFields(feature_class)
    #
    # # 打印所有字段的名称
    # print("字段名称列表:")
    # for field in fields:
    #     print(field.name)

    # 使用 SearchCursor 遍历所有要素，寻找 area 字段最大的要素
    with arcpy.da.SearchCursor(input_feature, ['OID@', area_field]) as cursor:
        for row in cursor:
            oid, area_value = row
            if max_area is None or area_value > max_area:
                max_area = area_value
                max_feature = oid

    # 如果找到了最大面积的要素，执行导出
    if max_feature is not None:
        # 创建查询语句，基于 OBJECTID 选择最大面积的要素
        where_clause = f"OID = {max_feature}"
        # Process: 导出要素 (导出要素) (conversion)
        arcpy.conversion.ExportFeatures(in_features=input_feature, out_features=output_feature,
                                        where_clause=where_clause)
        print(f"Feature with the largest {area_field} value exported to {output_feature}")
    else:
        print("No features found with a valid area value.")

def geojson_to_polygon(extract_geojson, shp_mask, identifier, tolerance, coast_line_shp):  # smooth
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Process: JSON 转要素 (JSON 转要素) (conversion)
    ISID_JSONToFeature = "in_memory\\ISID_JSONToFeature"
    arcpy.conversion.JSONToFeatures(in_json_file=extract_geojson, out_features=ISID_JSONToFeature,
                                    geometry_type="POLYLINE")
    # Process: 平滑线 (平滑线) (cartography)
    ISID_SmoothLine = "in_memory\\ISID_SmoothLine"
    with arcpy.EnvManager(transferGDBAttributeProperties="false"):
        arcpy.cartography.SmoothLine(in_features=ISID_JSONToFeature, out_feature_class=ISID_SmoothLine,
                                     algorithm="PAEK", tolerance=fr"{tolerance} Meters",
                                     endpoint_option="FIXED_CLOSED_ENDPOINT")
    # Process: 要素转面 (要素转面) (management)
    ISID_Polygon = "in_memory\\ISID_Poly"
    arcpy.management.FeatureToPolygon(in_features=[ISID_SmoothLine], out_feature_class=ISID_Polygon, attributes="ATTRIBUTES")
    # Process: 缓冲区 修复空洞
    # ISID_Polygon_Fixed = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\temp\l_buildShapeFeature\ISID_Polygon_Fixed.shp"
    ISID_Polygon_Fixed = fr"in_memory\ISID_Polygon_Fixed"
    arcpy.analysis.Buffer(in_features=ISID_Polygon, out_feature_class="in_memory\\ISID_Polygon_Fixed_temp",
                          buffer_distance_or_field="50 Meters", line_side="FULL", line_end_type="ROUND",
                          dissolve_option="NONE", dissolve_field=[], method="PLANAR")
    arcpy.analysis.Buffer(in_features="in_memory\\ISID_Polygon_Fixed_temp", out_feature_class=ISID_Polygon_Fixed,
                          buffer_distance_or_field="-50 Meters", line_side="FULL", line_end_type="ROUND",
                          dissolve_option="NONE", dissolve_field=[], method="PLANAR")

    # Process: 要素转点 找到中心点
    ISID_Polygon_Fixed_Poi = "in_memory\\ISID_Polygon_Fixed_Poi"
    arcpy.management.FeatureToPoint(in_features=ISID_Polygon_Fixed, out_feature_class=ISID_Polygon_Fixed_Poi,
                                    point_location="INSIDE")

    # 确认掩膜范围 shp_mask
    # 加载Shapefile/GDB Layer
    shapefile_layer = fr"in_memory\shapefile_layer"
    feature_path = shp_mask
    arcpy.MakeFeatureLayer_management(feature_path, shapefile_layer)
    # 标记id identifier
    where_clause = f"ALL_Uniq = {identifier}"
    arcpy.SelectLayerByAttribute_management(shapefile_layer, "NEW_SELECTION", where_clause)

    # Process: 按位置选择图层 (选择有效中心点 Fixed_Poi_Valid)
    Fixed_Poi_SelectLayerByLocation = arcpy.management.SelectLayerByLocation(
        in_layer=[ISID_Polygon_Fixed_Poi], overlap_type="INTERSECT", select_features=shapefile_layer,
        search_distance="30 Meters", selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")
    # Process: 导出要素 (导出要素) (conversion)
    # Fixed_Poi_Valid = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\temp\l_buildShapeFeature\Fixed_Poi_Valid.shp"     # 包含有效要素的中心点 Fixed_Poi_Valid
    Fixed_Poi_Valid = fr"in_memory\Fixed_Poi_Valid"
    arcpy.conversion.ExportFeatures(in_features=Fixed_Poi_SelectLayerByLocation, out_features=Fixed_Poi_Valid)
    # 清除选择状态
    arcpy.SelectLayerByAttribute_management(shapefile_layer, "CLEAR_SELECTION")
    arcpy.SelectLayerByAttribute_management(ISID_Polygon_Fixed_Poi, "CLEAR_SELECTION")

    # Process: 按位置选择图层 (选择有效图形)
    # Process: 添加连接 (添加连接) (management)
    # 使用 ListFields 函数获取字段列表
    # fields = arcpy.ListFields(ISID_Polygon_Fixed)
    # #
    # # 打印所有字段的名称
    # print("字段名称列表:")
    # for field in fields:
    #     print(field.name)
    ISID_Polygon_Fixed_link = \
    arcpy.management.JoinField(in_data=ISID_Polygon_Fixed, in_field="OBJECTID", join_table=Fixed_Poi_Valid,
                               join_field="ORIG_FID")[0]
    # Process: 导出要素 (导出要素) (conversion)
    ISID_Polygon_Fixed_temp = fr"in_memory\ISID_Polygon_Fixed_temp"     # 与中心点相交的图形
    arcpy.conversion.ExportFeatures(in_features=ISID_Polygon_Fixed_link, out_features=ISID_Polygon_Fixed_temp,
                                    where_clause="BUFF_DIST_1 <> 0")
    # Process: 计算几何属性 (计算几何属性) (management)
    ISID_Polygon_Fixed_temp2 = arcpy.management.CalculateGeometryAttributes(in_features=ISID_Polygon_Fixed_temp,
                                                                            geometry_property=[
                                                                                ["Shape_Area", "AREA_GEODESIC"]],
                                                                            coordinate_format="SAME_AS_INPUT")[0]
    # 导出有效图形中面积最大的
    export_largest_area_feature(input_feature=ISID_Polygon_Fixed_temp2, output_feature=coast_line_shp,
                                area_field='Shape_Area')

    print(fr"Geojson to polygon: {coast_line_shp}")

if __name__ == '__main__':
    # Global Environment settings
    geojson_to_polygon(
        extract_geojson="E:\\_OrderingProject\\F_IslandsBoundaryChange\\a_ArcData\\GEE\\ISID_224209_zoom_ND_extract.geojson",
        shp_mask="E:\\_OrderingProject\\F_IslandsBoundaryChange\\a_ArcData\\temp\\224209.shp",
        identifier='273',
        tolerance=300,
        coast_line_shp="E:\\_OrderingProject\\F_IslandsBoundaryChange\\b_ArcMap\\IslandsBoundaryChange\\IslandsBoundaryChange.gdb\\ISID_224209_Po_fi222")
    pass
