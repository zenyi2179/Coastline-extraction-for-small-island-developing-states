# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-01-08 09:04:02
"""
import os
import arcpy
import numpy as np
from dbfread import DBF

def calculate_statistics(dbf_file_path):
    """
    计算DBF文件中 'NEAR_DIST' 列的统计数据：
    - 平均值
    - 值小于30的个数百分比
    - 值小于60的个数百分比
    - 标准差
    - 均方根误差 (RMSE)

    参数:
    dbf_file_path (str): DBF文件路径

    返回:
    dict: 包含上述统计数据的字典
    """

    # 读取DBF文件
    dbf = DBF(dbf_file_path, encoding='utf-8')

    # 提取'NEAR_DIST'列的数据
    # near_dist_values = [record['NEAR_DIST'] for record in dbf if 'NEAR_DIST' in record]
    near_dist_values = []
    for record in dbf:
        if 'NEAR_DIST' in record:
            value = record['NEAR_DIST']
            if value >= 0:
                near_dist_values.append(value)

    # 如果没有数据，返回None
    if not near_dist_values:
        return None

    # 将数据转化为numpy数组
    near_dist_values = np.array(near_dist_values)

    # 计算统计值

    count_30 = np.sum(near_dist_values < 30)
    count_60 = np.sum(near_dist_values < 60)
    count_90 = np.sum(near_dist_values < 90)
    count_120 = np.sum(near_dist_values < 120)
    count_150 = np.sum(near_dist_values < 150)

    count_all = len(near_dist_values)
    percent_30 = count_30 / count_all * 100
    percent_60 = count_60 / count_all * 100
    percent_90 = count_90 / count_all * 100
    percent_120 = count_120 / count_all * 100
    percent_150 = count_150 / count_all * 100
    mean_value = np.mean(near_dist_values)
    std_dev = np.std(near_dist_values)
    rmse = np.sqrt(np.mean(near_dist_values ** 2))


    # 返回结果
    return {
        'count_30': count_30,
        'count_60': count_60,
        'count_90': count_90,
        'count_120': count_120,
        'count_150': count_150,
        'count_all': count_all,
        'percent_30': percent_30,
        'percent_60': percent_60,
        'percent_90': percent_90,
        'percent_120': percent_120,
        'percent_150': percent_150,
        'mean_value': mean_value,
        'std_dev': std_dev,
        'rmse': rmse
    }


def read_txt_to_list(file_path: str) -> list[str]:
    """
    读取文本文件内容为列表
    :param file_path: 文本文件路径
    :return: 行内容组成的字符串列表
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file.readlines()]
    except Exception as e:
        print(f"[ERROR] 读取文件失败 {file_path}: {e}")
        return []


if __name__ == '__main__':
    print("year gid mean_value	std_dev	rmse	percent_30	percent_60	percent_90	percent_120	percent_150	count_30	count_60	count_90	count_120	count_150	count_all")

    list_year = ['2015']
    list_sids = read_txt_to_list(file_path=fr"SIDS_37.txt")
    for year in list_year:
        for sid in list_sids:

            # 示例使用 sids
            # folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}"
            # near_table = os.path.join(folder_path, fr'SP_{sid}_{str(year)[-2:]}.dbf')

            # # 第三方数据集初始化
            folder_path = fr"E:\_OrderingProject\F_IslandsBoundaryChange\b_ArcData\_AccuracyEvaluation\{sid}\{year}\ThirdPartyDataSource"
            # OSM
            # near_table = os.path.join(folder_path, fr'OSM_SP_{sid}_{str(year)[-2:]}.dbf')
            # # GCL_FCS30
            # near_table = os.path.join(folder_path, fr'GCL_SP_{sid}_{str(year)[-2:]}.dbf')
            # # GSV
            # near_table = os.path.join(folder_path, fr'GSV_SP_{sid}_{str(year)[-2:]}.dbf')
            # # GMSSD
            near_table = os.path.join(folder_path, fr'GMSSD_SP_{sid}_{str(year)[-2:]}.dbf')

            # 计算DBF文件中 'NEAR_DIST' 列的统计数据
            statistics = calculate_statistics(near_table)
            if statistics:
                # print("统计结果:", statistics)
                # print(year, sid,
                #       statistics['mean_value'],
                #       statistics['std_dev'],
                #       statistics['rmse'],
                #       statistics['percent_30'],
                #       statistics['percent_60'],
                #       statistics['percent_90'],
                #       statistics['percent_120'],
                #       statistics['percent_150'],
                #       statistics['count_30'],
                #       statistics['count_60'],
                #       statistics['count_90'],
                #       statistics['count_120'],
                #       statistics['count_150'],
                #       statistics['count_all'],
                #       )
                print(year, sid,
                      statistics['mean_value'],
                      statistics['std_dev'],
                      statistics['rmse'],
                      statistics['percent_30'],
                      statistics['percent_60'],
                      statistics['percent_90'],
                      statistics['count_30'],
                      statistics['count_60'],
                      statistics['count_90'],
                      statistics['count_all'],
                      )
            else:
                print(year, sid,)
